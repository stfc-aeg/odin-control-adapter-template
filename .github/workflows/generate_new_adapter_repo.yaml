name: Create odin-control Adapter Repo
on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name'
        required: true
        type: string
      repository_name:
        description: 'Repository Name'
        required: true
        type: string
      author_name:
        description: 'Author Name'
        required: true
        type: string
        default: 'Josh Harris'
      author_email:
        description: 'Author Email'
        required: true
        type: string
        default: 'josh.harris@stfc.ac.uk'
      description:
        description: 'Project Description'
        required: true
        type: string
        default: 'odin-control adapter'
      project_slug:
        description: 'Directory name'
        required: false
        type: string
        default: 'control'

jobs:
  create-project:
    runs-on: ubuntu-latest
    steps:  
    # Commented out manually cloning template repo, to try and use the public gh-link to the template and use gha-cookiecutter mechanism to use template
    #- uses: actions/checkout@v4
    
   # - name: Generate project from template
   #   uses: andrewthetechie/gha-cookiecutter@main
   #   with:
   #    template: .

    - name: Generate project from Github stored template
      uses: andrewthetechie/gha-cookiecutter@main
      with:
        template: gh:JoshHarris2108/odin-control-template
        cookiecutterValues: |
          {
            "project_name": "${{ github.event.inputs.project_name }}",
            "project_slug": "${{ github.event.inputs.project_slug }}",
            "author_name": "${{ github.event.inputs.author_name }}",
            "author_email": "${{ github.event.inputs.author_email }}",
            "description": "${{ github.event.inputs.description }}",
            "python_requires": ">=3.10",
            "github_org": "JoshHarris2108",
            "github_url": "https://github.com/JoshHarris2108/${{ github.event.inputs.repository_name }}"
          }
    
    - name: Create GitHub repository
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      run: |
        gh repo create "JoshHarris2108/${{ github.event.inputs.repository_name }}" \
          --description "${{ github.event.inputs.description }}" \
          --private
    
    - name: Push files to new repository
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      run: |
        # Clone the empty repository with auth token
        git clone "https://${{ secrets.PERSONAL_GITHUB_TOKEN }}@github.com/JoshHarris2108/${{ github.event.inputs.repository_name }}.git"
        
        # Copy generated files into the cloned repo
        cp -r "${{ github.event.inputs.project_slug }}" "${{ github.event.inputs.repository_name }}/"
        
        # Commit and push
        cd "${{ github.event.inputs.repository_name }}"
        git config user.name "${{ github.event.inputs.author_name }}"
        git config user.email "${{ github.event.inputs.author_email }}"
        git add .
        git commit -m "Initial commit from github action workflow to create blank adapter for ${{ github.event.inputs.project_name }}"
        git push
